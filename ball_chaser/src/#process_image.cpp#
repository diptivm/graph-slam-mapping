#include "ros/ros.h"
#include "ball_chaser/DriveToTarget.h"
#include <sensor_msgs/Image.h>


ros::ServiceClient client;

void drive_robot(float lin_x, float ang_z)
{
	ROS_INFO("driving robot");
	ROS_INFO("%f\n", lin_x);
	ROS_INFO("%f\n", ang_z);

	ball_chaser::DriveToTarget srv;
	srv.request.linear_x = lin_x;
	srv.request.angular_z = ang_z;

	if(!client.call(srv)) 
	{
		ROS_ERROR("Failed to call service command_robot");
	}

}

void process_image_callback(const sensor_msgs::Image img) 
{
	int white_pixel = 255;
	int height = img.height;
	int width = img.width;
	int step = img.step;
	bool found = false;

	const int left_thresh = step/3; // if ball is to the left of this, drive left
	const int right_thresh = 2*step/3; // if ball is to the right of this, drive right
	
	float lin_vel = 0.0;
	float ang_vel = 0.0;

	ROS_INFO("Height: %d",height);		
	ROS_INFO("Width: %d",width);
	ROS_INFO("Step: %d",step);

	for (int ii = 0; ii < height*step; ii = ii + 3) 
	{
				
		if(img.data[ii] == white_pixel && img.data[ii+1] == white_pixel && img.data[ii+2] == white_pixel)
		{
			found = true;

			int ball_loc = ii%step;
			if(ball_loc < left_thresh) 
			{
				lin_vel = 0.1;								
				ang_vel = 0.5;
			}
			if(ball_loc > right_thresh) 
			{
				lin_vel = 0.1;				
				ang_vel = -0.5;
			}			
			else 
			{
				lin_vel = 0.2;
				ang_vel = 0.0;
			}
			drive_robot(lin_vel, ang_vel);
			ROS_INFO("Found ball: %d", ball_loc);
			break;
		}
	}
	
	if(!found) 
	{
		ROS_INFO("no ball");
		drive_robot(0, 0);
	}
	
	
	
}

int main(int argc, char** argv) 
{
	ros::init(argc, argv, "process_image");
	ros::NodeHandle n;

	client = n.serviceClient<ball_chaser::DriveToTarget>("/ball_chaser/command_robot");
	
	ros::Subscriber sub1 = n.subscribe("/camera/rgb/image_raw", 10, process_image_callback);

	ros::spin();
	
	return 0;
}
